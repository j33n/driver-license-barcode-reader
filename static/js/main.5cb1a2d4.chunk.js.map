{"version":3,"sources":["pages/Home/index.js","serviceWorker.js","index.js","pages/Home/Home.module.css","assets/icon_barcode.svg"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_scannerIsRunning","startScanner","bind","assertThisInitialized","startStopScanner","Quagga","init","inputStream","name","type","target","document","querySelector","constraints","width","height","facingMode","decoder","readers","debug","showCanvas","showPatches","showFoundPatches","showSkeleton","showLabels","showPatchLabels","showRemainingPatchLabels","boxFromPatches","showTransformed","showTransformedBox","showBB","err","console","log","start","onProcessed","result","drawingCtx","canvas","ctx","overlay","drawingCanvas","dom","boxes","clearRect","parseInt","getAttribute","filter","box","forEach","ImageDebug","drawPath","x","y","color","lineWidth","codeResult","code","line","onDetected","stop","react_default","a","createElement","className","styles","container","header","src","icon_barcode","logo","alt","id","value","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","pages_Home","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","logo_spin","link","__webpack_require__","p"],"mappings":"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","file":"static/js/main.5cb1a2d4.chunk.js","sourcesContent":["import React, {\n  Component\n} from 'react';\nimport Quagga from 'quagga';\nimport icon_barcode from '../../assets/icon_barcode.svg';\nimport styles from './Home.module.css';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      _scannerIsRunning: false,\n    };\n    this.startScanner = this.startScanner.bind(this);\n    this.startStopScanner = this.startStopScanner.bind(this);\n  }\n\n  state = {\n    _scannerIsRunning: false,\n  }\n\n  componentDidMount() {\n    this.startScanner()\n  }\n\n  startScanner() {\n    Quagga.init({\n      inputStream: {\n        name: \"Live\",\n        type: \"LiveStream\",\n        target: document.querySelector('#scanner-container'),\n        constraints: {\n          width: 480,\n          height: 320,\n          facingMode: \"environment\"\n        },\n      },\n      decoder: {\n        readers: [\n          \"code_128_reader\",\n          \"ean_reader\",\n          \"ean_8_reader\",\n          \"code_39_reader\",\n          \"code_39_vin_reader\",\n          \"codabar_reader\",\n          \"upc_reader\",\n          \"upc_e_reader\",\n          \"i2of5_reader\"\n        ],\n        debug: {\n          showCanvas: true,\n          showPatches: true,\n          showFoundPatches: true,\n          showSkeleton: true,\n          showLabels: true,\n          showPatchLabels: true,\n          showRemainingPatchLabels: true,\n          boxFromPatches: {\n            showTransformed: true,\n            showTransformedBox: true,\n            showBB: true\n          }\n        }\n      },\n\n    }, function (err) {\n      if (err) {\n        console.log(err);\n        return\n      }\n\n      console.log(\"Initialization finished. Ready to start\");\n      Quagga.start();\n\n      // Set flag to is running\n      // this.setState({\n      //   _scannerIsRunning: true,\n      // });\n    });\n\n    // Quagga.decodeSingle({\n    //   decoder: {\n    //     readers: [\"code_128_reader\"] // List of active readers\n    //   },\n    //   locate: true, // try to locate the barcode in the image\n    //   // You can set the path to the image in your server\n    //   // or using it's base64 data URI representation data:image/jpg;base64, + data\n    //   src: '../../assets/icon_barcode.svg'\n    // }, function (result) {\n    //   if (result.codeResult) {\n    //     console.log(\"result\", result.codeResult.code);\n    //   } else {\n    //     console.log(\"not detected\");\n    //   }\n    // });\n\n    Quagga.onProcessed(function (result) {\n      var drawingCtx = Quagga.canvas.ctx.overlay,\n        drawingCanvas = Quagga.canvas.dom.overlay;\n\n      if (result) {\n        if (result.boxes) {\n          drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute(\"width\")), parseInt(drawingCanvas.getAttribute(\"height\")));\n          result.boxes.filter(function (box) {\n            return box !== result.box;\n          }).forEach(function (box) {\n            Quagga.ImageDebug.drawPath(box, {\n              x: 0,\n              y: 1\n            }, drawingCtx, {\n              color: \"green\",\n              lineWidth: 2\n            });\n          });\n        }\n\n        if (result.box) {\n          Quagga.ImageDebug.drawPath(result.box, {\n            x: 0,\n            y: 1\n          }, drawingCtx, {\n            color: \"#00F\",\n            lineWidth: 2\n          });\n        }\n\n        if (result.codeResult && result.codeResult.code) {\n          Quagga.ImageDebug.drawPath(result.line, {\n            x: 'x',\n            y: 'y'\n          }, drawingCtx, {\n            color: 'red',\n            lineWidth: 3\n          });\n        }\n      }\n    });\n\n\n    Quagga.onDetected(function (result) {\n      console.log(\"Barcode detected and processed : [\" + result.codeResult.code + \"]\", result);\n    });\n  }\n\n  startStopScanner() {\n    if (this.state._scannerIsRunning) {\n      Quagga.stop();\n    } else {\n      this.startScanner();\n    }\n  }\n\n  render() {\n    return (\n      <div className={styles.container}>\n        <header className={styles.header}>\n          <img src={icon_barcode} className={styles.logo} alt=\"logo\" />\n          <h2>\n            Driver's License BarCode Reader\n          </h2>\n            <div id=\"scanner-container\"></div>\n            <input type=\"button\" id=\"btn\" value=\"Start/Stop the scanner\" onClick={this.startStopScanner} />\n            {/* <input type=\"button\" id=\"btn\" value=\"Scan image\" onClick={this.startImageScanner} /> */}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './pages/Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__2-rtn\",\"logo\":\"Home_logo__NK_uQ\",\"logo_spin\":\"Home_logo_spin__3J83s\",\"header\":\"Home_header__1GfC8\",\"link\":\"Home_link__1mVso\"};","module.exports = __webpack_public_path__ + \"static/media/icon_barcode.ded75b6a.svg\";"],"sourceRoot":""}